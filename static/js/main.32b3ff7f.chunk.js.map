{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Auth/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/Login.tsx","components/PageNotFound/PageNotFound.tsx","app/App.tsx","index.tsx","components/PageNotFound/PageNotFound.module.css"],"names":["StatusCode","TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","Ok","rejectWithValue","errors","fieldsError","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","todolist","item","changeTodolistTitleTC","asyncActions","changeTodolistFilter","index","findIndex","filter","entityStatus","map","tl","splice","unshift","todolistsReducer","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","domainModel","response","tasksReducer","todolistsActions","forEach","todoListId","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","window","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","disabled","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","tasksActions","useEffect","newTitle","addTaskCallback","changeTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","style","paddingTop","Button","TodolistsList","useSelector","isLogginedIn","Grid","container","padding","spacing","allTodolistTasks","Paper","to","todolistsAsyncActions","tasksAsyncActions","Alert","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","PageNotFound","image","src","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.32b3ff7f.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '0416d0e4-e507-4140-8ae2-fbcfceb7fe23'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeAuthType>>(`auth/me`);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n// types\r\nexport type MeAuthType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string, error: string }\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum StatusCode {\r\n    Ok = 0,\r\n    Error = 1,\r\n    Captcha = 10,\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, FieldErrorType, LoginParamsType, StatusCode} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: string[], fieldsError?: FieldErrorType[] } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await authAPI.login(param)\r\n    try {\r\n        if (res.data.resultCode === StatusCode.Ok) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsError: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsError: undefined})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'idle'}))\r\n    }\r\n\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await authAPI.logout()\r\n    try {\r\n\r\n        if (res.data.resultCode === StatusCode.Ok) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'failed'}))\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'failed'}))\r\n        handleServerNetworkError(error as AxiosError, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC: (state, action: PayloadAction<{ value: boolean }>) => {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n\r\n","import {setIsLoggedInAC} from \"../features/Auth/auth-reducer\";\r\nimport {authAPI, StatusCode} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initialize', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    try {\r\n        if (res.data.resultCode === StatusCode.Ok) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error as AxiosError, dispatch)\r\n    }\r\n\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle' as RequestStatusType,\r\n        error: null as null | string,\r\n        isInitialized: false as boolean\r\n    },\r\n    reducers: {\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, state => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nconst fetchTodolistsTC = createAsyncThunk('todolist/fetchTodolist', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n\r\n        return {todolists: res.data}\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n\r\n        return rejectWithValue(error)\r\n    }\r\n\r\n})\r\nconst removeTodolistTC = createAsyncThunk('todolist/removeTodolist', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(error)\r\n    }\r\n\r\n\r\n})\r\nconst addTodolistTC = createAsyncThunk('todolist/addTodolist', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolist: res.data.data.item}\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(error)\r\n\r\n    }\r\n})\r\nconst changeTodolistTitleTC = createAsyncThunk('todolist/changeTodolistTitle', async (param: { id: string, title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: param.id, title: param.title}\r\n\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(error)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: [] as TodolistDomainType[],\r\n    reducers: {\r\n        changeTodolistFilter: (state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) => {\r\n            const index = state.findIndex(todolist => todolist.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus: (state, action: PayloadAction<{ id: string, status: RequestStatusType }>) => {\r\n            const index = state.findIndex(todolist => todolist.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(todolist => todolist.id === action.payload.id)\r\n            if (index !== -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(todolist => todolist.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\nexport const {\r\n    changeTodolistEntityStatus,\r\n    \r\n} = slice.actions\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {asyncActions as todolistsActions} from \"./todolists-reducer\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {changeTodolistEntityStatus} from \"./todolists-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n\r\n})\r\n\r\nexport const removeTask = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    try {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    } catch (error) {\r\n        handleServerNetworkError(error as AxiosError, thunkAPI.dispatch)\r\n        thunkAPI.dispatch(changeTodolistEntityStatus({id: param.todolistId, status: 'failed'}))\r\n        return thunkAPI.rejectWithValue(error)\r\n    }\r\n\r\n})\r\n\r\nexport const addTask = createAsyncThunk('tasks/addTask', async (param: { title: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error as AxiosError, thunkAPI.dispatch)\r\n        thunkAPI.dispatch(changeTodolistEntityStatus({id: param.todolistId, status: 'failed'}))\r\n        return thunkAPI.rejectWithValue(error)\r\n    }\r\n})\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {\r\n                taskId: param.taskId,\r\n                model: param.domainModel,\r\n                todolistId: param.todolistId\r\n            }\r\n\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (e: any) {\r\n\r\n        const error = e.response\r\n            ? (e.response.data as { error: string }).error\r\n            : e.message\r\n\r\n        handleServerNetworkError({message: e.message}, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(todolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(todolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(todolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: TodolistType) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(todolist => todolist.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(todolist => todolist.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {ActionCreatorsMapObject, bindActionCreators, combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useMemo} from \"react\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    auth: authReducer,\r\n})\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware),\r\n})\r\n// types\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n    return boundActions\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (param: { taskId: string, todolistId: string }) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask({\r\n        taskId: props.task.id,\r\n        todolistId: props.todolistId\r\n    }), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {useActions} from \"../../../app/store\";\r\nimport {tasksActions, todolistsActions} from \"../index\";\r\nimport {fetchTasks} from \"../tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n    const {addTask, updateTask, removeTask} = useActions(tasksActions)\r\n    useEffect(() => {\r\n        dispatch(fetchTasks(props.todolist.id))\r\n    }, [props.todolist])\r\n\r\n    const changeTaskStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        updateTask({taskId: id, domainModel: {status}, todolistId})\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        updateTask({taskId: id, domainModel: {title: newTitle}, todolistId})\r\n    }, [])\r\n\r\n\r\n    const addTaskCallback = useCallback((title: string) => {\r\n        addTask({title, todolistId: props.todolist.id})\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title})\r\n    }, [props.todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => changeTodolistFilter({\r\n        filter: 'all',\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n    const onActiveClickHandler = useCallback(() => changeTodolistFilter({\r\n        filter: 'active',\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => changeTodolistFilter({\r\n        filter: 'completed',\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={removeTask}\r\n                                                changeTaskTitle={changeTaskTitle}\r\n                                                changeTaskStatus={changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {AppRootStateType, useActions} from '../../app/store'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {todolistsActions} from \"./index\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLogginedIn = useSelector<AppRootStateType, boolean>((state) => {\r\n        return state.auth.isLoggedIn\r\n    })\r\n    const {\r\n        addTodolistTC,\r\n        fetchTodolistsTC,\r\n    } = useActions(todolistsActions)\r\n\r\n    useEffect(() => {\r\n        if (!isLogginedIn) {\r\n            return;\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [])\r\n\r\n\r\n    if (!isLogginedIn) {\r\n\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistTC}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as tasksAsyncActions} from './tasks-reducer'\r\nimport {asyncActions as todolistsAsyncActions} from './todolists-reducer'\r\nimport {slice} from './todolists-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...slice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions\r\n}\r\nexport {\r\n    tasksActions, todolistsActions, TodolistsList\r\n}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch<Dispatch>()\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, FormikValues, useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch, AppRootStateType, useAppDispatch} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\ntype FormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\nexport const Login = () => {\r\n    const isLogginedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password?.length <= 3) {\r\n                errors.password = 'Password must be more than 3 symbols'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(loginTC(values))\r\n\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsError?.length) {\r\n                    const error = action.payload?.fieldsError[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n\r\n            }\r\n\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLogginedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email\r\n                        && formik.errors.email\r\n                            ? <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            : null}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password\r\n                        && formik.errors.password\r\n                            ? <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                            : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React from 'react';\r\nimport style from './PageNotFound.module.css';\r\n\r\nconst PageNotFound = () => {\r\n    return (\r\n        <div className={style.container}>\r\n            <h1 className={style.title}>404: PAGE NOT FOUND</h1>\r\n            <img className={style.image}\r\n                 src='https://images.all-free-download.com/images/graphiclarge/error_404_page_not_found_6845510.jpg'/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageNotFound;","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport ErrorSnackbar from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport PageNotFound from \"../components/PageNotFound/PageNotFound\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Auth/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLogginedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const dispatch = useDispatch()\r\n    const onClickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLogginedIn && <Button onClick={onClickHandler} color=\"inherit\">Log Out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} element={<Login/>}/>\r\n                    <Route path={'*'} element={<Navigate to={'/404'}/>}/>\r\n                    <Route path={'/404'}\r\n                           element={<PageNotFound/>}/>\r\n                </Routes>\r\n            </Container>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PageNotFound_title__3MFc8\",\"container\":\"PageNotFound_container__263S7\"};"],"sourceRoot":""}